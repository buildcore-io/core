name: Action | Deploy to Production

on:
  release:
    types: [published]

jobs:
  deploy_hosting:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: packages/ui
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: cd ../../ && npm run build:ui
      - name: Build
        run: npm run build:prod
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_SOONAVERSE }}'
          projectId: 'soonaverse'
          channelId: live
          target: 5d1024cf-d55e-4b10-9d27-eccc37e80161
      - name: Purge cache
        env:
          CLOUDFLARE_API: ${{ secrets.CLOUDFLARE_API_PURGE }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/52428a0399af40665f0e8c6875520990/purge_cache" \
              -H "Authorization: Bearer $CLOUDFLARE_API" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}'

  deploy_functions:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Set env vars
        working-directory: packages/functions
        run: echo "$FUNCTIONS_ENV_VARS" >> .env
        env:
          FUNCTIONS_ENV_VARS: ${{ secrets.FUNCTIONS_ENV_VARS_PROD }}
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only functions,firestore:indexes -P soonaverse -f
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  deploy_to_npm:
    runs-on: ubuntu-latest
    environment: production
    env:
      NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
      - name: Init
        run: |
          npx lerna version ${{ github.event.release.tag_name }} --no-private --no-git-tag-version --y
          npm run build:lib
      - name: Deploy to npm
        run: npx lerna publish ${{ github.event.release.tag_name }} --no-private --no-git-tag-version --y

  roll-firestore:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 360
    needs: [deploy_functions, deploy_hosting]
    defaults:
      run:
        working-directory: packages/functions
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '10'
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          npm i -g ts-node
          cd ../../ && npm run build:functions
      - name: Set env vars
        run: echo "$FUNCTIONS_ENV_VARS" >> .env
        env:
          FUNCTIONS_ENV_VARS: ${{ secrets.FUNCTIONS_ENV_VARS_PROD }}
      - name: Create serviceAccountKey.json
        run: echo "$SERVICE_ACCOUNT" >> scripts/serviceAccountKey.json
        env:
          SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SOONAVERSE }}
      - name: Roll firestore
        run: cd scripts && ts-node db.upgrade.ts
