name: Action | Deploy to Production

on: pull_request

jobs:
  deploy_api:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.SERVICE_ACCOUNT }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Set env vars
        working-directory: packages/api
        run: echo "$ENV_VARS" > .env
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
      - name: Build image
        run: |
            cp packages/api/Dockerfile .
            gcloud builds submit --tag gcr.io/$GOOGLE_CLOUD_PROJECT/api
      - name: Deploy
        run: |
            gcloud run deploy api \
              --image gcr.io/$GOOGLE_CLOUD_PROJECT/api \
              --min-instances=3 \
              --memory=1Gi \
              --cpu=1 \
              --concurrency=1000 \
              --allow-unauthenticated \
              --timeout=600 \
              --ingress=internal-and-cloud-load-balancing \
              --region=us-central1 \

  deploy_functions:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.SERVICE_ACCOUNT }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Set env vars
        working-directory: packages/functions
        run: echo "$ENV_VARS" > .env
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
      - name: Build and deploy
        run: |
            npm run build:functions
            npm run create-deploy-script
            chmod 777 ./deploy.sh
            ./deploy.sh

  deploy-firestore-indexes:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Deploy indexes
        uses: w9jds/firebase-action@v12.8.0
        with:
          args: deploy --only firestore:indexes -f
        env:
          GCP_SA_KEY: ${{ secrets.SERVICE_ACCOUNT }}
          PROJECT_ID: default

  deploy_to_npm:
    runs-on: ubuntu-latest
    environment: production
    env:
      NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Init
        run: |
          npm version ${{ github.event.release.tag_name }} --workspace packages/interfaces
          npm version ${{ github.event.release.tag_name }} --workspace packages/lib
          npm run build:lib
      - name: Deploy to npm
        run: |
          npm publish --workspace packages/interfaces
          npm publish --workspace packages/lib

  roll-firestore:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 360
    needs: [deploy_functions]
    defaults:
      run:
        working-directory: packages/functions
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '10'
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set env vars
        run: echo "$ENV_VARS" > .env
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
      - name: Create serviceAccountKey.json
        run: echo "$SERVICE_ACCOUNT" > scripts/serviceAccountKey.json
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
      - name: Install dependencies
        run: |
          npm i -g ts-node
          cd ../../ && npm run build:functions
      - name: Roll firestore
        run: cd scripts && ts-node db.upgrade.ts
